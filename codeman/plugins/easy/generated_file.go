package easy

import (
	"bytes"
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
	"strings"
	"text/template"
)

func NewGenFile(gen *protogen.Plugin, file *protogen.File, filename string) GenFile {
	return GenFile{
		GeneratedFile: gen.NewGeneratedFile(filename, file.GoImportPath),
		file:          file,
		gen:           gen,
	}
}
func NewGenFile2(gen *protogen.Plugin, file *protogen.File, filename, pluginName, pluginVer string) *GenFile {
	return &GenFile{
		GeneratedFile: gen.NewGeneratedFile(filename, file.GoImportPath),
		pluginName:    pluginName,
		pluginVer:     pluginVer,
		file:          file,
		gen:           gen,
	}
}

type GenFile struct {
	*protogen.GeneratedFile
	file       *protogen.File
	gen        *protogen.Plugin
	pluginName string
	pluginVer  string
}

func (g *GenFile) WriteGoFileHead(readOnly bool) {
	rs := ""
	if readOnly {
		rs = " DO NOT EDIT."
	}
	g.P(fmt.Sprintf(`// Code generated by %s.%s
// versions:
// - %s %v
// - protoc %s
// source: %s`,
		g.pluginName, rs,
		g.pluginName, g.pluginVer,
		ProtocVersion(g.gen), g.file.Desc.Path(),
	))
	g.P()
}
func (g *GenFile) Pf(format string, args ...any) {
	g.GeneratedFile.P(fmt.Sprintf(format, args...))
}

func (g *GenFile) WriteTextTemplate(tmpl *template.Template, desc any) {
	if desc == nil {
		return
	}
	buf := new(bytes.Buffer)
	if err := tmpl.Execute(buf, desc); err != nil {
		panic(err)
	}
	g.GeneratedFile.P(strings.TrimSpace(buf.String()))
}
